(define keep-first-n (lambda (N L) (cond ((> N (length L)) L) ((<= N 0) ()) ((= N 1) (list (car L))) (else (append (list (car L)) (keep-first-n (- N 1) (cdr L)))))))
(define sum (lambda (L) (if (= (length L) 0) 0 (+ (car L) (sum (cdr L))))))
